generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // Uses connection pooling
    url       = env("POSTGRES_PRISMA_URL")
    // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
    // or you'll have dangling databases from migrations
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ROLE {
    ADMIN
    LIDER_COMUNIDAD
    LIDER_CALLE
}

model User {
    id        String  @id @default(cuid())
    name      String
    username  String  @unique
    image     String? @default("")
    lastName  String
    password  String
    role_user ROLE    @default(LIDER_CALLE)

    created_at DateTime @default(now())

    consejo          ConsejoComunal? @relation(fields: [consejoComunalId], references: [id])
    consejoComunalId Int?

    accounts Account[]
    sessions Session[]
    Censo    Censo[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ConsejoComunal {
    id             Int    @unique @default(autoincrement())
    nombre_consejo String
    nombre_clap    String
    circuito       Int
    bms            String
    comunidad      String
    sector         String
    cod_siscod     String
    estado         String
    municipio      String
    parroquia      String
    rif            String

    logo_clap         String?
    cantidad_combos   Int      @default(0)
    cantidad_familias Int      @default(0)
    fecha_registro    DateTime @default(now())

    //FOREIGN KEY
    censos         Censo[]
    encargados     EncargadoClap[]
    User           User[]
    Lider          Lider[]
    LiderComunidad LiderComunidad[]
    EntregaCajas   EntregaCajas[]
}

// CENSO 

model Censo {
    id                   String             @id() @default(cuid())
    cargaFamiliar        Int                @default(1)
    tipoFamilia          String             @default("unifamiliar")
    cajasClapsPorRecibir Int                @default(0)
    fecha                DateTime           @default(now())
    condicion_vivienda   CONDICION_VIVIENDA

    //VALIDACION DE INFORMACION QUE HACE EL JEFE DE COMUNIDAD
    datos_validado          Boolean @default(false)
    encargado_validacion    User?   @relation(fields: [encargado_validacion_id], references: [id])
    encargado_validacion_id String?
    estatus                 Int?

    //FOREIGN KEY
    jefeFamilia      JefeFamilia?
    consejoComunal   ConsejoComunal @relation(fields: [consejoComunalId], references: [id])
    consejoComunalId Int
}

model Casa {
    id          BigInt        @id() @default(autoincrement())
    manzana     String
    casa        String
    calle       String
    jefeFamilia JefeFamilia[]
}

enum CONDICION_VIVIENDA {
    PROPIA
    ALQUILADA
    ARRIMADO
    OTRO
}

enum ESTADO_CIVIL {
    Soltero
    Casado
    Divorciado
    Viudo
}

enum ESTADO_TRABAJO {
    PUBLICA
    PRIVADO
    NO_TRABAJA
}

model JefeFamilia {
    id                  BigInt         @id() @default(autoincrement())
    nombres             String
    apellidos           String
    fechaNacimiento     DateTime
    genero              String
    telefono            String
    email               String
    estado_civil        ESTADO_CIVIL
    telefono_habitacion String
    estudiando          String
    profesion           String
    ocupacion           String
    deporte             String
    nivel_educativo     String
    trabaja             ESTADO_TRABAJO @default(NO_TRABAJA)
    carnet_conapdis     Boolean        @default(false)
    enfermedad_cronica  String
    recibe_pension      Boolean        @default(false)
    vacuna_covid        Boolean        @default(false)

    tipoDocumento      String
    numeroDocumento    String
    serialCarnetPatria String
    codCarnetPatria    String
    observacion        String
    discapacidad       String

    fechaRegistro DateTime @default(now())

    //FOREIGN KEY
    censo          Censo           @relation(fields: [censoId], references: [id])
    censoId        String          @unique
    casa           Casa?           @relation(fields: [casaId], references: [id])
    casaId         BigInt?
    familiar       Familiar[]
    Lider          Lider[]
    LiderComunidad LiderComunidad?
}

model Familiar {
    id                 BigInt   @id() @default(autoincrement())
    nombres            String
    apellidos          String
    numeroDocumento    String
    tipoDocumento      String
    fechaNacimiento    DateTime
    genero             String
    serialCarnetPatria String
    codCarnetPatria    String
    observacion        String
    parentesco         String
    discapacidad       String
    fechaRegistro      DateTime @default(now())

    // Nuevos DATOS

    estado_civil       ESTADO_CIVIL
    telefono           String
    email              String
    profesion          String
    ocupacion          String
    trabaja            ESTADO_TRABAJO @default(NO_TRABAJA)
    nivel_educativo    String
    estudiando         String
    deporte            String
    enfermedad_cronica String
    recibe_pension     Boolean        @default(false)
    vacuna_covid       Boolean        @default(false)

    //FOREIGN KEY
    jefeFamilia   JefeFamilia @relation(fields: [jefeFamiliaId], references: [id])
    jefeFamiliaId BigInt
}

// Nuevos Modelos

model Lider {
    id               Int         @unique @default(autoincrement())
    fechaRegistro    DateTime    @default(now())
    jefeFamiliaId    BigInt      @unique
    jefeFamilia      JefeFamilia @relation(fields: [jefeFamiliaId], references: [id])
    consejoComunalId Int
    manzana          String

    ConsejoComunal ConsejoComunal @relation(fields: [consejoComunalId], references: [id])

    @@unique([consejoComunalId, manzana])
}

model LiderComunidad {
    id               Int            @unique @default(autoincrement())
    jefeFamiliaId    BigInt         @unique
    jefeFamilia      JefeFamilia    @relation(fields: [jefeFamiliaId], references: [id])
    fechaRegistro    DateTime       @default(now())
    ConsejoComunal   ConsejoComunal @relation(fields: [consejoComunalId], references: [id])
    consejoComunalId Int
}

model EncargadoClap {
    id        Int    @unique @default(autoincrement())
    cargo     String
    nombres   String
    apellidos String
    cedula    String
    telefono  String
    profesion String
    email     String

    fechaRegistro    DateTime       @default(now())
    ConsejoComunal   ConsejoComunal @relation(fields: [consejoComunalId], references: [id])
    consejoComunalId Int
}

// Entrega de cajas clap

model Beneficiados {
    id              Int    @unique @default(autoincrement())
    nombres         String
    apellidos       String
    numeroDocumento String
    tipoDocumento   String
    cajasAsignadas  Int
    casa            String
    manzana         String

    poseeCarnet    Boolean      @default(false)
    tipoFamilia    String       @default("unifamiliar")
    EntregaCajas   EntregaCajas @relation(fields: [entregaCajasId], references: [id])
    entregaCajasId Int
}

model EntregaCajas {
    id              Int      @unique @default(autoincrement())
    costeCajaUnidad Float
    costeTransporte Float
    costeLogistica  Float
    fechaEntrega    DateTime

    //foreign
    beneficiados     Beneficiados[]
    ConsejoComunal   ConsejoComunal @relation(fields: [consejoComunalId], references: [id])
    consejoComunalId Int
}

// model CajaClap {
//     id              Int   @unique @default(autoincrement())
//     pagado          Float
//     metodoPago 
//     logistica       Float
// }
